
TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004270  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004434  08004434  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800443c  0800443c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000000c  08004450  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08004450  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013337  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002419  00000000  00000000  00033373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00035790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000366a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017758  00000000  00000000  00037520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012277  00000000  00000000  0004ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d475  00000000  00000000  00060eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d0  00000000  00000000  000ee3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043f0 	.word	0x080043f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080043f0 	.word	0x080043f0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <ILI9488_SendCommand+0x44>)
 80004f6:	f001 fbb3 	bl	8001c60 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 80004fa:	2200      	movs	r2, #0
 80004fc:	2102      	movs	r1, #2
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <ILI9488_SendCommand+0x44>)
 8000500:	f001 fbae 	bl	8001c60 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi1, &tmpCmd, 1, 1);
 8000504:	f107 010f 	add.w	r1, r7, #15
 8000508:	2301      	movs	r3, #1
 800050a:	2201      	movs	r2, #1
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <ILI9488_SendCommand+0x48>)
 800050e:	f002 faf4 	bl	8002afa <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000512:	2201      	movs	r2, #1
 8000514:	2102      	movs	r1, #2
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <ILI9488_SendCommand+0x44>)
 8000518:	f001 fba2 	bl	8001c60 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020400 	.word	0x40020400
 8000528:	200004cc 	.word	0x200004cc

0800052c <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <ILI9488_SendData+0x44>)
 8000542:	f001 fb8d 	bl	8001c60 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000546:	2200      	movs	r2, #0
 8000548:	2102      	movs	r1, #2
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <ILI9488_SendData+0x44>)
 800054c:	f001 fb88 	bl	8001c60 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi1, &tmpCmd, 1, 1);
 8000550:	f107 010f 	add.w	r1, r7, #15
 8000554:	2301      	movs	r3, #1
 8000556:	2201      	movs	r2, #1
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <ILI9488_SendData+0x48>)
 800055a:	f002 face 	bl	8002afa <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 800055e:	2201      	movs	r2, #1
 8000560:	2102      	movs	r1, #2
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <ILI9488_SendData+0x44>)
 8000564:	f001 fb7c 	bl	8001c60 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020400 	.word	0x40020400
 8000574:	200004cc 	.word	0x200004cc

08000578 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000588:	4815      	ldr	r0, [pc, #84]	; (80005e0 <ILI9488_SendData_Multi+0x68>)
 800058a:	f001 fb69 	bl	8001c60 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 800058e:	2200      	movs	r2, #0
 8000590:	2102      	movs	r1, #2
 8000592:	4813      	ldr	r0, [pc, #76]	; (80005e0 <ILI9488_SendData_Multi+0x68>)
 8000594:	f001 fb64 	bl	8001c60 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 8000598:	e015      	b.n	80005c6 <ILI9488_SendData_Multi+0x4e>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005a0:	bf28      	it	cs
 80005a2:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80005a6:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 80005a8:	89fa      	ldrh	r2, [r7, #14]
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <ILI9488_SendData_Multi+0x6c>)
 80005b2:	f002 faa2 	bl	8002afa <HAL_SPI_Transmit>
		buff += chunk_size;
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1e6      	bne.n	800059a <ILI9488_SendData_Multi+0x22>
	}
	CS_D();
 80005cc:	2201      	movs	r2, #1
 80005ce:	2102      	movs	r1, #2
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <ILI9488_SendData_Multi+0x68>)
 80005d2:	f001 fb45 	bl	8001c60 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020400 	.word	0x40020400
 80005e4:	200004cc 	.word	0x200004cc

080005e8 <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 80005ec:	2201      	movs	r2, #1
 80005ee:	2102      	movs	r1, #2
 80005f0:	486c      	ldr	r0, [pc, #432]	; (80007a4 <ILI9488_Init+0x1bc>)
 80005f2:	f001 fb35 	bl	8001c60 <HAL_GPIO_WritePin>
	RST_A();
 80005f6:	2200      	movs	r2, #0
 80005f8:	2104      	movs	r1, #4
 80005fa:	486a      	ldr	r0, [pc, #424]	; (80007a4 <ILI9488_Init+0x1bc>)
 80005fc:	f001 fb30 	bl	8001c60 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 ffe1 	bl	80015c8 <HAL_Delay>
		 RST_D();
 8000606:	2201      	movs	r2, #1
 8000608:	2104      	movs	r1, #4
 800060a:	4866      	ldr	r0, [pc, #408]	; (80007a4 <ILI9488_Init+0x1bc>)
 800060c:	f001 fb28 	bl	8001c60 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 8000610:	4b65      	ldr	r3, [pc, #404]	; (80007a8 <ILI9488_Init+0x1c0>)
 8000612:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000616:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8000618:	4b64      	ldr	r3, [pc, #400]	; (80007ac <ILI9488_Init+0x1c4>)
 800061a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800061e:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 8000620:	20e0      	movs	r0, #224	; 0xe0
 8000622:	f7ff ff5d 	bl	80004e0 <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff80 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 800062c:	2003      	movs	r0, #3
 800062e:	f7ff ff7d 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000632:	2009      	movs	r0, #9
 8000634:	f7ff ff7a 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000638:	2008      	movs	r0, #8
 800063a:	f7ff ff77 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800063e:	2016      	movs	r0, #22
 8000640:	f7ff ff74 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000644:	200a      	movs	r0, #10
 8000646:	f7ff ff71 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 800064a:	203f      	movs	r0, #63	; 0x3f
 800064c:	f7ff ff6e 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 8000650:	2078      	movs	r0, #120	; 0x78
 8000652:	f7ff ff6b 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000656:	204c      	movs	r0, #76	; 0x4c
 8000658:	f7ff ff68 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 800065c:	2009      	movs	r0, #9
 800065e:	f7ff ff65 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 8000662:	200a      	movs	r0, #10
 8000664:	f7ff ff62 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000668:	2008      	movs	r0, #8
 800066a:	f7ff ff5f 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 800066e:	2016      	movs	r0, #22
 8000670:	f7ff ff5c 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 8000674:	201a      	movs	r0, #26
 8000676:	f7ff ff59 	bl	800052c <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 800067a:	200f      	movs	r0, #15
 800067c:	f7ff ff56 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 8000680:	20e1      	movs	r0, #225	; 0xe1
 8000682:	f7ff ff2d 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff ff50 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 800068c:	2016      	movs	r0, #22
 800068e:	f7ff ff4d 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 8000692:	2019      	movs	r0, #25
 8000694:	f7ff ff4a 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 8000698:	2003      	movs	r0, #3
 800069a:	f7ff ff47 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 800069e:	200f      	movs	r0, #15
 80006a0:	f7ff ff44 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80006a4:	2005      	movs	r0, #5
 80006a6:	f7ff ff41 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80006aa:	2032      	movs	r0, #50	; 0x32
 80006ac:	f7ff ff3e 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80006b0:	2045      	movs	r0, #69	; 0x45
 80006b2:	f7ff ff3b 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80006b6:	2046      	movs	r0, #70	; 0x46
 80006b8:	f7ff ff38 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80006bc:	2004      	movs	r0, #4
 80006be:	f7ff ff35 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80006c2:	200e      	movs	r0, #14
 80006c4:	f7ff ff32 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 80006c8:	200d      	movs	r0, #13
 80006ca:	f7ff ff2f 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 80006ce:	2035      	movs	r0, #53	; 0x35
 80006d0:	f7ff ff2c 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 80006d4:	2037      	movs	r0, #55	; 0x37
 80006d6:	f7ff ff29 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80006da:	200f      	movs	r0, #15
 80006dc:	f7ff ff26 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 80006e0:	20c0      	movs	r0, #192	; 0xc0
 80006e2:	f7ff fefd 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 80006e6:	2017      	movs	r0, #23
 80006e8:	f7ff ff20 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 80006ec:	2015      	movs	r0, #21
 80006ee:	f7ff ff1d 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 80006f2:	20c1      	movs	r0, #193	; 0xc1
 80006f4:	f7ff fef4 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 80006f8:	2041      	movs	r0, #65	; 0x41
 80006fa:	f7ff ff17 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 80006fe:	20c5      	movs	r0, #197	; 0xc5
 8000700:	f7ff feee 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff ff11 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 800070a:	2012      	movs	r0, #18
 800070c:	f7ff ff0e 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 8000710:	2080      	movs	r0, #128	; 0x80
 8000712:	f7ff ff0b 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 8000716:	2036      	movs	r0, #54	; 0x36
 8000718:	f7ff fee2 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 800071c:	2048      	movs	r0, #72	; 0x48
 800071e:	f7ff ff05 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 8000722:	203a      	movs	r0, #58	; 0x3a
 8000724:	f7ff fedc 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8000728:	2066      	movs	r0, #102	; 0x66
 800072a:	f7ff feff 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 800072e:	20b0      	movs	r0, #176	; 0xb0
 8000730:	f7ff fed6 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 8000734:	2080      	movs	r0, #128	; 0x80
 8000736:	f7ff fef9 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 800073a:	20b1      	movs	r0, #177	; 0xb1
 800073c:	f7ff fed0 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 8000740:	20a0      	movs	r0, #160	; 0xa0
 8000742:	f7ff fef3 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000746:	20b4      	movs	r0, #180	; 0xb4
 8000748:	f7ff feca 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 800074c:	2002      	movs	r0, #2
 800074e:	f7ff feed 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000752:	20b6      	movs	r0, #182	; 0xb6
 8000754:	f7ff fec4 	bl	80004e0 <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fee7 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fee4 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 8000764:	20e9      	movs	r0, #233	; 0xe9
 8000766:	f7ff febb 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff fede 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 8000770:	20f7      	movs	r0, #247	; 0xf7
 8000772:	f7ff feb5 	bl	80004e0 <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 8000776:	20a9      	movs	r0, #169	; 0xa9
 8000778:	f7ff fed8 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 800077c:	2051      	movs	r0, #81	; 0x51
 800077e:	f7ff fed5 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 8000782:	202c      	movs	r0, #44	; 0x2c
 8000784:	f7ff fed2 	bl	800052c <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 8000788:	2082      	movs	r0, #130	; 0x82
 800078a:	f7ff fecf 	bl	800052c <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 800078e:	2011      	movs	r0, #17
 8000790:	f7ff fea6 	bl	80004e0 <ILI9488_SendCommand>

	 	HAL_Delay(120);
 8000794:	2078      	movs	r0, #120	; 0x78
 8000796:	f000 ff17 	bl	80015c8 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 800079a:	2029      	movs	r0, #41	; 0x29
 800079c:	f7ff fea0 	bl	80004e0 <ILI9488_SendCommand>

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40020400 	.word	0x40020400
 80007a8:	2000002a 	.word	0x2000002a
 80007ac:	20000028 	.word	0x20000028

080007b0 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	80fb      	strh	r3, [r7, #6]
 80007c2:	4603      	mov	r3, r0
 80007c4:	80bb      	strh	r3, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	807b      	strh	r3, [r7, #2]
 80007ca:	4613      	mov	r3, r2
 80007cc:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 80007ce:	202a      	movs	r0, #42	; 0x2a
 80007d0:	f7ff fe86 	bl	80004e0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	733b      	strb	r3, [r7, #12]
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	737b      	strb	r3, [r7, #13]
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	0a1b      	lsrs	r3, r3, #8
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2104      	movs	r1, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff febc 	bl	8000578 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8000800:	202b      	movs	r0, #43	; 0x2b
 8000802:	f7ff fe6d 	bl	80004e0 <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	723b      	strb	r3, [r7, #8]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	727b      	strb	r3, [r7, #9]
 8000816:	883b      	ldrh	r3, [r7, #0]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	b29b      	uxth	r3, r3
 800081c:	b2db      	uxtb	r3, r3
 800081e:	72bb      	strb	r3, [r7, #10]
 8000820:	883b      	ldrh	r3, [r7, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2104      	movs	r1, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fea3 	bl	8000578 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8000832:	202c      	movs	r0, #44	; 0x2c
 8000834:	f7ff fe54 	bl	80004e0 <ILI9488_SendCommand>
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bd90      	pop	{r4, r7, pc}

08000840 <fillScreen>:
  }
}
//6. Fill the entire screen with a background color

void fillScreen(uint16_t color)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af02      	add	r7, sp, #8
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
	fillRect(0, 0,  width, height, color);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <fillScreen+0x2c>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b21a      	sxth	r2, r3
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <fillScreen+0x30>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	b219      	sxth	r1, r3
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	460b      	mov	r3, r1
 800085c:	2100      	movs	r1, #0
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f808 	bl	8000874 <fillRect>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000002a 	.word	0x2000002a
 8000870:	20000028 	.word	0x20000028

08000874 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000896:	4a8f      	ldr	r2, [pc, #572]	; (8000ad4 <fillRect+0x260>)
 8000898:	8812      	ldrh	r2, [r2, #0]
 800089a:	4293      	cmp	r3, r2
 800089c:	f280 8116 	bge.w	8000acc <fillRect+0x258>
 80008a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008a4:	4a8c      	ldr	r2, [pc, #560]	; (8000ad8 <fillRect+0x264>)
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	4293      	cmp	r3, r2
 80008aa:	f280 810f 	bge.w	8000acc <fillRect+0x258>
		return;
	if ((x + w - 1) >= width)
 80008ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a86      	ldr	r2, [pc, #536]	; (8000ad4 <fillRect+0x260>)
 80008ba:	8812      	ldrh	r2, [r2, #0]
 80008bc:	4293      	cmp	r3, r2
 80008be:	dd05      	ble.n	80008cc <fillRect+0x58>
		w = width - x;
 80008c0:	4b84      	ldr	r3, [pc, #528]	; (8000ad4 <fillRect+0x260>)
 80008c2:	881a      	ldrh	r2, [r3, #0]
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 80008cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a80      	ldr	r2, [pc, #512]	; (8000ad8 <fillRect+0x264>)
 80008d8:	8812      	ldrh	r2, [r2, #0]
 80008da:	4293      	cmp	r3, r2
 80008dc:	dd05      	ble.n	80008ea <fillRect+0x76>
		h = height - y;
 80008de:	4b7e      	ldr	r3, [pc, #504]	; (8000ad8 <fillRect+0x264>)
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	88bb      	ldrh	r3, [r7, #4]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80008ea:	88f8      	ldrh	r0, [r7, #6]
 80008ec:	88b9      	ldrh	r1, [r7, #4]
 80008ee:	88fa      	ldrh	r2, [r7, #6]
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b29c      	uxth	r4, r3
 80008fa:	88ba      	ldrh	r2, [r7, #4]
 80008fc:	883b      	ldrh	r3, [r7, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	b29b      	uxth	r3, r3
 8000902:	3b01      	subs	r3, #1
 8000904:	b29b      	uxth	r3, r3
 8000906:	4622      	mov	r2, r4
 8000908:	f7ff ff52 	bl	80007b0 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 800090c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800090e:	0adb      	lsrs	r3, r3, #11
 8000910:	b29b      	uxth	r3, r3
 8000912:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8000914:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000916:	115b      	asrs	r3, r3, #5
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800091e:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 8000920:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 800092a:	7efa      	ldrb	r2, [r7, #27]
 800092c:	4613      	mov	r3, r2
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	4a6a      	ldr	r2, [pc, #424]	; (8000adc <fillRect+0x268>)
 8000934:	fb82 1203 	smull	r1, r2, r2, r3
 8000938:	441a      	add	r2, r3
 800093a:	1112      	asrs	r2, r2, #4
 800093c:	17db      	asrs	r3, r3, #31
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 8000942:	7eba      	ldrb	r2, [r7, #26]
 8000944:	4613      	mov	r3, r2
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	1a9b      	subs	r3, r3, r2
 800094a:	4a65      	ldr	r2, [pc, #404]	; (8000ae0 <fillRect+0x26c>)
 800094c:	fb82 1203 	smull	r1, r2, r2, r3
 8000950:	441a      	add	r2, r3
 8000952:	1152      	asrs	r2, r2, #5
 8000954:	17db      	asrs	r3, r3, #31
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 800095a:	7e7a      	ldrb	r2, [r7, #25]
 800095c:	4613      	mov	r3, r2
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	4a5e      	ldr	r2, [pc, #376]	; (8000adc <fillRect+0x268>)
 8000964:	fb82 1203 	smull	r1, r2, r2, r3
 8000968:	441a      	add	r2, r3
 800096a:	1112      	asrs	r2, r2, #4
 800096c:	17db      	asrs	r3, r3, #31
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8000972:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000976:	f9b7 2000 	ldrsh.w	r2, [r7]
 800097a:	fb02 f203 	mul.w	r2, r2, r3
 800097e:	4613      	mov	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800098c:	d204      	bcs.n	8000998 <fillRect+0x124>
		cnt = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	e02f      	b.n	80009f8 <fillRect+0x184>
	}
	else {
		cnt = n/3;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <fillRect+0x270>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 80009a4:	2303      	movs	r3, #3
 80009a6:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	4a4f      	ldr	r2, [pc, #316]	; (8000ae8 <fillRect+0x274>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	0bdb      	lsrs	r3, r3, #15
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	3301      	adds	r3, #1
 80009b6:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 80009b8:	7cfb      	ldrb	r3, [r7, #19]
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
 80009bc:	e014      	b.n	80009e8 <fillRect+0x174>
			if(n%i == 0){
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80009c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d107      	bne.n	80009e2 <fillRect+0x16e>
				cnt = i;
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	61fb      	str	r3, [r7, #28]
				break;
 80009e0:	e00a      	b.n	80009f8 <fillRect+0x184>
		for (i=min_cnt; i < n/3; i++){
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	3301      	adds	r3, #1
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	4a3e      	ldr	r2, [pc, #248]	; (8000ae4 <fillRect+0x270>)
 80009ec:	fba2 2303 	umull	r2, r3, r2, r3
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d3e2      	bcc.n	80009be <fillRect+0x14a>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 80009f8:	69fc      	ldr	r4, [r7, #28]
 80009fa:	466b      	mov	r3, sp
 80009fc:	461d      	mov	r5, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	3b01      	subs	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4620      	mov	r0, r4
 8000a06:	f04f 0100 	mov.w	r1, #0
 8000a0a:	f04f 0200 	mov.w	r2, #0
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	00cb      	lsls	r3, r1, #3
 8000a14:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a18:	00c2      	lsls	r2, r0, #3
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f04f 0100 	mov.w	r1, #0
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	00cb      	lsls	r3, r1, #3
 8000a2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a2e:	00c2      	lsls	r2, r0, #3
 8000a30:	1de3      	adds	r3, r4, #7
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	ebad 0d03 	sub.w	sp, sp, r3
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	3300      	adds	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
 8000a44:	e019      	b.n	8000a7a <fillRect+0x206>
	{
		frm_buf[i*3] = r;
 8000a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	7ef9      	ldrb	r1, [r7, #27]
 8000a52:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	7eb9      	ldrb	r1, [r7, #26]
 8000a62:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	7e79      	ldrb	r1, [r7, #25]
 8000a72:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	3301      	adds	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <fillRect+0x270>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	085b      	lsrs	r3, r3, #1
 8000a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3dd      	bcc.n	8000a46 <fillRect+0x1d2>
	}
	DC_DATA();
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a90:	4816      	ldr	r0, [pc, #88]	; (8000aec <fillRect+0x278>)
 8000a92:	f001 f8e5 	bl	8001c60 <HAL_GPIO_WritePin>
	CS_A();
 8000a96:	2200      	movs	r2, #0
 8000a98:	2102      	movs	r1, #2
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <fillRect+0x278>)
 8000a9c:	f001 f8e0 	bl	8001c60 <HAL_GPIO_WritePin>
		while(cnt>0)
 8000aa0:	e00a      	b.n	8000ab8 <fillRect+0x244>
		{
			HAL_SPI_Transmit(&hspi1, frm_buf, buf_size, HAL_MAX_DELAY);
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <fillRect+0x27c>)
 8000aae:	f002 f824 	bl	8002afa <HAL_SPI_Transmit>

			cnt -= 1;
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f1      	bne.n	8000aa2 <fillRect+0x22e>
		}
		CS_D();
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <fillRect+0x278>)
 8000ac4:	f001 f8cc 	bl	8001c60 <HAL_GPIO_WritePin>
 8000ac8:	46ad      	mov	sp, r5
 8000aca:	e000      	b.n	8000ace <fillRect+0x25a>
		return;
 8000acc:	bf00      	nop

}
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad4:	2000002a 	.word	0x2000002a
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	84210843 	.word	0x84210843
 8000ae0:	82082083 	.word	0x82082083
 8000ae4:	aaaaaaab 	.word	0xaaaaaaab
 8000ae8:	80008001 	.word	0x80008001
 8000aec:	40020400 	.word	0x40020400
 8000af0:	200004cc 	.word	0x200004cc

08000af4 <setRotation>:


void setRotation(uint8_t r)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]

	ILI9488_SendCommand(ILI9488_MADCTL);
 8000afe:	2036      	movs	r0, #54	; 0x36
 8000b00:	f7ff fcee 	bl	80004e0 <ILI9488_SendCommand>
	uint8_t rotation = r % 4; // can't be higher than 3
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	73fb      	strb	r3, [r7, #15]
	switch (rotation) {
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d83a      	bhi.n	8000b88 <setRotation+0x94>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <setRotation+0x24>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000b41 	.word	0x08000b41
 8000b20:	08000b59 	.word	0x08000b59
 8000b24:	08000b71 	.word	0x08000b71
	case 0:
		ILI9488_SendData(MADCTL_MX | MADCTL_BGR);
 8000b28:	2048      	movs	r0, #72	; 0x48
 8000b2a:	f7ff fcff 	bl	800052c <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <setRotation+0x9c>)
 8000b30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b34:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <setRotation+0xa0>)
 8000b38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b3c:	801a      	strh	r2, [r3, #0]
		break;
 8000b3e:	e023      	b.n	8000b88 <setRotation+0x94>
	case 1:
		ILI9488_SendData(MADCTL_MV | MADCTL_BGR);
 8000b40:	2028      	movs	r0, #40	; 0x28
 8000b42:	f7ff fcf3 	bl	800052c <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <setRotation+0x9c>)
 8000b48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b4c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <setRotation+0xa0>)
 8000b50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b54:	801a      	strh	r2, [r3, #0]
		break;
 8000b56:	e017      	b.n	8000b88 <setRotation+0x94>
	case 2:
		ILI9488_SendData(MADCTL_MY | MADCTL_BGR);
 8000b58:	2088      	movs	r0, #136	; 0x88
 8000b5a:	f7ff fce7 	bl	800052c <ILI9488_SendData>
		width = ILI9488_TFTWIDTH;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <setRotation+0x9c>)
 8000b60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b64:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTHEIGHT;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <setRotation+0xa0>)
 8000b68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b6c:	801a      	strh	r2, [r3, #0]
		break;
 8000b6e:	e00b      	b.n	8000b88 <setRotation+0x94>
	case 3:
		ILI9488_SendData(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000b70:	20e8      	movs	r0, #232	; 0xe8
 8000b72:	f7ff fcdb 	bl	800052c <ILI9488_SendData>
		width = ILI9488_TFTHEIGHT;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <setRotation+0x9c>)
 8000b78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b7c:	801a      	strh	r2, [r3, #0]
		height = ILI9488_TFTWIDTH;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <setRotation+0xa0>)
 8000b80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b84:	801a      	strh	r2, [r3, #0]
		break;
 8000b86:	bf00      	nop
	}

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000002a 	.word	0x2000002a
 8000b94:	20000028 	.word	0x20000028

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fca1 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 f8d9 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f000 fa27 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000baa:	f000 f9a3 	bl	8000ef4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000bae:	f000 f93b 	bl	8000e28 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000bb2:	f000 f9c9 	bl	8000f48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bb6:	f000 f965 	bl	8000e84 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bba:	f000 f9ef 	bl	8000f9c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_SPI_ENABLE(&hspi1);
  ILI9488_Init();
 8000bbe:	f7ff fd13 	bl	80005e8 <ILI9488_Init>

  HAL_Delay(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc6:	f000 fcff 	bl	80015c8 <HAL_Delay>
  setRotation(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ff92 	bl	8000af4 <setRotation>
  char badmpu[] = "BEFORE FILLSCREEN\n\r";
 8000bd0:	4b5f      	ldr	r3, [pc, #380]	; (8000d50 <main+0x1b8>)
 8000bd2:	1d3c      	adds	r4, r7, #4
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	6023      	str	r3, [r4, #0]

    	        	  HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff faf9 	bl	80001d8 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	1d39      	adds	r1, r7, #4
 8000bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf0:	4858      	ldr	r0, [pc, #352]	; (8000d54 <main+0x1bc>)
 8000bf2:	f002 f9d6 	bl	8002fa2 <HAL_UART_Transmit>
    	        	  HAL_Delay(1000);
 8000bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfa:	f000 fce5 	bl	80015c8 <HAL_Delay>
  fillScreen(ILI9488_NAVY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f7ff fe1e 	bl	8000840 <fillScreen>
  	    	    fillScreen(ILI9488_BLUE);
 8000c04:	201f      	movs	r0, #31
 8000c06:	f7ff fe1b 	bl	8000840 <fillScreen>
  	    	    fillScreen(ILI9488_DARKGREEN);
 8000c0a:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8000c0e:	f7ff fe17 	bl	8000840 <fillScreen>
  	    	    fillScreen(ILI9488_MAROON);
 8000c12:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 8000c16:	f7ff fe13 	bl	8000840 <fillScreen>
  	    	    fillScreen(ILI9488_PURPLE);
 8000c1a:	f647 000f 	movw	r0, #30735	; 0x780f
 8000c1e:	f7ff fe0f 	bl	8000840 <fillScreen>
  	    	    fillScreen(ILI9488_OLIVE);
 8000c22:	f647 30e0 	movw	r0, #31712	; 0x7be0
 8000c26:	f7ff fe0b 	bl	8000840 <fillScreen>
  	    	    fillScreen(ILI9488_LIGHTGREY);
 8000c2a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8000c2e:	f7ff fe07 	bl	8000840 <fillScreen>
  	    	    fillScreen(ILI9488_GREEN);
 8000c32:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000c36:	f7ff fe03 	bl	8000840 <fillScreen>
  	    	  fillScreen(ILI9488_NAVY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f7ff fe00 	bl	8000840 <fillScreen>
  	    	    	    fillScreen(ILI9488_BLUE);
 8000c40:	201f      	movs	r0, #31
 8000c42:	f7ff fdfd 	bl	8000840 <fillScreen>
  	    	    	    fillScreen(ILI9488_DARKGREEN);
 8000c46:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8000c4a:	f7ff fdf9 	bl	8000840 <fillScreen>
  	    	    	    fillScreen(ILI9488_MAROON);
 8000c4e:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 8000c52:	f7ff fdf5 	bl	8000840 <fillScreen>
  	    	    	    fillScreen(ILI9488_PURPLE);
 8000c56:	f647 000f 	movw	r0, #30735	; 0x780f
 8000c5a:	f7ff fdf1 	bl	8000840 <fillScreen>
  	    	    	    fillScreen(ILI9488_OLIVE);
 8000c5e:	f647 30e0 	movw	r0, #31712	; 0x7be0
 8000c62:	f7ff fded 	bl	8000840 <fillScreen>
  	    	    	    fillScreen(ILI9488_LIGHTGREY);
 8000c66:	f24c 6018 	movw	r0, #50712	; 0xc618
 8000c6a:	f7ff fde9 	bl	8000840 <fillScreen>
  	    	    	    fillScreen(ILI9488_GREEN);
 8000c6e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000c72:	f7ff fde5 	bl	8000840 <fillScreen>
  	    	    	  fillScreen(ILI9488_NAVY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff fde2 	bl	8000840 <fillScreen>
  	    	    	    	    fillScreen(ILI9488_BLUE);
 8000c7c:	201f      	movs	r0, #31
 8000c7e:	f7ff fddf 	bl	8000840 <fillScreen>
  	    	    	    	    fillScreen(ILI9488_DARKGREEN);
 8000c82:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8000c86:	f7ff fddb 	bl	8000840 <fillScreen>
  	    	    	    	    fillScreen(ILI9488_MAROON);
 8000c8a:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 8000c8e:	f7ff fdd7 	bl	8000840 <fillScreen>
  	    	    	    	    fillScreen(ILI9488_PURPLE);
 8000c92:	f647 000f 	movw	r0, #30735	; 0x780f
 8000c96:	f7ff fdd3 	bl	8000840 <fillScreen>
  	    	    	    	    fillScreen(ILI9488_OLIVE);
 8000c9a:	f647 30e0 	movw	r0, #31712	; 0x7be0
 8000c9e:	f7ff fdcf 	bl	8000840 <fillScreen>
  	    	    	    	    fillScreen(ILI9488_LIGHTGREY);
 8000ca2:	f24c 6018 	movw	r0, #50712	; 0xc618
 8000ca6:	f7ff fdcb 	bl	8000840 <fillScreen>
  	    	    	    	    fillScreen(ILI9488_GREEN);
 8000caa:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000cae:	f7ff fdc7 	bl	8000840 <fillScreen>
  	    	    fillRect(0, 10, 480, 10, ILI9488_BLUE);
 8000cb2:	231f      	movs	r3, #31
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cbc:	210a      	movs	r1, #10
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fdd8 	bl	8000874 <fillRect>
  	    	    fillRect(0, 40, 480, 10, ILI9488_DARKGREEN);
 8000cc4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	230a      	movs	r3, #10
 8000ccc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cd0:	2128      	movs	r1, #40	; 0x28
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fdce 	bl	8000874 <fillRect>
  	    	    fillRect(0, 60, 480, 10, ILI9488_MAROON);
 8000cd8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	230a      	movs	r3, #10
 8000ce0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ce4:	213c      	movs	r1, #60	; 0x3c
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fdc4 	bl	8000874 <fillRect>
  	    	    fillRect(0, 80, 480, 10, ILI9488_PURPLE);
 8000cec:	f647 030f 	movw	r3, #30735	; 0x780f
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cf8:	2150      	movs	r1, #80	; 0x50
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fdba 	bl	8000874 <fillRect>
  	    	    fillRect(0, 100, 480, 10, ILI9488_OLIVE);
 8000d00:	f647 33e0 	movw	r3, #31712	; 0x7be0
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	230a      	movs	r3, #10
 8000d08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d0c:	2164      	movs	r1, #100	; 0x64
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fdb0 	bl	8000874 <fillRect>
  	    	    fillRect(0, 120, 480, 10, ILI9488_LIGHTGREY);
 8000d14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d20:	2178      	movs	r1, #120	; 0x78
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fda6 	bl	8000874 <fillRect>
  	    	    fillRect(0, 140, 480, 10, ILI9488_BLUE);
 8000d28:	231f      	movs	r3, #31
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d32:	218c      	movs	r1, #140	; 0x8c
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fd9d 	bl	8000874 <fillRect>
  	    	    fillRect(460, 220, 20, 100, ILI9488_BLUE);
 8000d3a:	231f      	movs	r3, #31
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2364      	movs	r3, #100	; 0x64
 8000d40:	2214      	movs	r2, #20
 8000d42:	21dc      	movs	r1, #220	; 0xdc
 8000d44:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8000d48:	f7ff fd94 	bl	8000874 <fillRect>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <main+0x1b4>
 8000d4e:	bf00      	nop
 8000d50:	08004408 	.word	0x08004408
 8000d54:	20000488 	.word	0x20000488

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2230      	movs	r2, #48	; 0x30
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fb3a 	bl	80043e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <SystemClock_Config+0xc8>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <SystemClock_Config+0xc8>)
 8000d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemClock_Config+0xc8>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <SystemClock_Config+0xcc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <SystemClock_Config+0xcc>)
 8000da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <SystemClock_Config+0xcc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dc8:	2319      	movs	r3, #25
 8000dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dcc:	23c0      	movs	r3, #192	; 0xc0
 8000dce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 f9bb 	bl	8002158 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000de8:	f000 f97e 	bl	80010e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2103      	movs	r1, #3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fc1d 	bl	8002648 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e14:	f000 f968 	bl	80010e8 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	; 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e2e:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <MX_I2C1_Init+0x54>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MX_I2C1_Init+0x58>)
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_I2C1_Init+0x50>)
 8000e66:	f000 ff15 	bl	8001c94 <HAL_I2C_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 f93a 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000002c 	.word	0x2000002c
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	000186a0 	.word	0x000186a0

08000e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <MX_SPI1_Init+0x6c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e9c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_SPI1_Init+0x68>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI1_Init+0x68>)
 8000eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI1_Init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ed2:	220a      	movs	r2, #10
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ed8:	f001 fd86 	bl	80029e8 <HAL_SPI_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000ee2:	f000 f901 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200004cc 	.word	0x200004cc
 8000ef0:	40013000 	.word	0x40013000

08000ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART1_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f2c:	f001 ffec 	bl	8002f08 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f8d7 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000488 	.word	0x20000488
 8000f44:	40011000 	.word	0x40011000

08000f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_USART2_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART2_UART_Init+0x4c>)
 8000f80:	f001 ffc2 	bl	8002f08 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f8ad 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000524 	.word	0x20000524
 8000f98:	40004400 	.word	0x40004400

08000f9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	f000 ff9c 	bl	8001f1c <HAL_PCD_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 f87d 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000080 	.word	0x20000080

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b32      	ldr	r3, [pc, #200]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_GPIO_Init+0xe4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <MX_GPIO_Init+0xe4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_GPIO_Init+0xe4>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_GPIO_Init+0xe4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <MX_GPIO_Init+0xe8>)
 8001086:	f000 fdeb 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f240 4106 	movw	r1, #1030	; 0x406
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_GPIO_Init+0xec>)
 8001092:	f000 fde5 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_GPIO_Init+0xe8>)
 80010b0:	f000 fc52 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80010b4:	f240 4306 	movw	r3, #1030	; 0x406
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_GPIO_Init+0xec>)
 80010ce:	f000 fc43 	bl	8001958 <HAL_GPIO_Init>

}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020400 	.word	0x40020400

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <Error_Handler+0x8>
	...

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x4c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x4c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_I2C_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12b      	bne.n	80011be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_I2C_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_I2C_MspInit+0x88>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_I2C_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001182:	23c0      	movs	r3, #192	; 0xc0
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001192:	2304      	movs	r3, #4
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <HAL_I2C_MspInit+0x8c>)
 800119e:	f000 fbdb 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_I2C_MspInit+0x88>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_I2C_MspInit+0x88>)
 80011ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_I2C_MspInit+0x88>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_SPI_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_SPI_MspInit+0x88>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_SPI_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_SPI_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800123e:	2305      	movs	r3, #5
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 800124a:	f000 fb85 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40013000 	.word	0x40013000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a36      	ldr	r2, [pc, #216]	; (800135c <HAL_UART_MspInit+0xf8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12d      	bne.n	80012e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <HAL_UART_MspInit+0xfc>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a34      	ldr	r2, [pc, #208]	; (8001360 <HAL_UART_MspInit+0xfc>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <HAL_UART_MspInit+0xfc>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_UART_MspInit+0xfc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <HAL_UART_MspInit+0xfc>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_UART_MspInit+0xfc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d0:	2307      	movs	r3, #7
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4822      	ldr	r0, [pc, #136]	; (8001364 <HAL_UART_MspInit+0x100>)
 80012dc:	f000 fb3c 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e0:	e038      	b.n	8001354 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a20      	ldr	r2, [pc, #128]	; (8001368 <HAL_UART_MspInit+0x104>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d133      	bne.n	8001354 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_UART_MspInit+0xfc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_UART_MspInit+0xfc>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_MspInit+0xfc>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_UART_MspInit+0xfc>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_UART_MspInit+0xfc>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_UART_MspInit+0xfc>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001324:	230c      	movs	r3, #12
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001334:	2307      	movs	r3, #7
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_UART_MspInit+0x100>)
 8001340:	f000 fb0a 	bl	8001958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2026      	movs	r0, #38	; 0x26
 800134a:	f000 fa3c 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800134e:	2026      	movs	r0, #38	; 0x26
 8001350:	f000 fa55 	bl	80017fe <HAL_NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40011000 	.word	0x40011000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40004400 	.word	0x40004400

0800136c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800138c:	d132      	bne.n	80013f4 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_PCD_MspInit+0x90>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_PCD_MspInit+0x90>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_PCD_MspInit+0x90>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013bc:	230a      	movs	r3, #10
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <HAL_PCD_MspInit+0x94>)
 80013c8:	f000 fac6 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_PCD_MspInit+0x90>)
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_PCD_MspInit+0x90>)
 80013d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d6:	6353      	str	r3, [r2, #52]	; 0x34
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_PCD_MspInit+0x90>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_PCD_MspInit+0x90>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_PCD_MspInit+0x90>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f000 f89a 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <USART2_IRQHandler+0x10>)
 800145e:	f001 fe33 	bl	80030c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000524 	.word	0x20000524

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ac:	4c0b      	ldr	r4, [pc, #44]	; (80014dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ba:	f7ff ffd7 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f002 ff6b 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff fb69 	bl	8000b98 <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d4:	08004444 	.word	0x08004444
  ldr r2, =_sbss
 80014d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014dc:	2000056c 	.word	0x2000056c

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_Init+0x40>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_Init+0x40>)
 80014fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x40>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f94f 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fdec 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f967 	bl	800181a <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001564:	f000 f92f 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000568 	.word	0x20000568

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000568 	.word	0x20000568

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001790:	f7ff ff8e 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff29 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff3e 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff8e 	bl	8001704 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5d 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff31 	bl	8001674 <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff feb6 	bl	80015b0 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d008      	beq.n	8001864 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e052      	b.n	800190a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0216 	bic.w	r2, r2, #22
 8001872:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001882:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2b00      	cmp	r3, #0
 800188a:	d103      	bne.n	8001894 <HAL_DMA_Abort+0x62>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0208 	bic.w	r2, r2, #8
 80018a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b4:	e013      	b.n	80018de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b6:	f7ff fe7b 	bl	80015b0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d90c      	bls.n	80018de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2203      	movs	r2, #3
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e015      	b.n	800190a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e4      	bne.n	80018b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	223f      	movs	r2, #63	; 0x3f
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d004      	beq.n	8001930 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e00c      	b.n	800194a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2205      	movs	r2, #5
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e159      	b.n	8001c28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8148 	bne.w	8001c22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80a2 	beq.w	8001c22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afa:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_GPIO_Init+0x2ec>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_GPIO_Init+0x202>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2f4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0x1fe>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a47      	ldr	r2, [pc, #284]	; (8001c50 <HAL_GPIO_Init+0x2f8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00d      	beq.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a46      	ldr	r2, [pc, #280]	; (8001c54 <HAL_GPIO_Init+0x2fc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x1f6>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a45      	ldr	r2, [pc, #276]	; (8001c58 <HAL_GPIO_Init+0x300>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_GPIO_Init+0x1f2>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x204>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x2ec>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7a:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc8:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf2:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f aea2 	bls.w	8001974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40013c00 	.word	0x40013c00

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e12b      	b.n	8001efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fa42 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f000 fe4e 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a81      	ldr	r2, [pc, #516]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d807      	bhi.n	8001d18 <HAL_I2C_Init+0x84>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4a80      	ldr	r2, [pc, #512]	; (8001f0c <HAL_I2C_Init+0x278>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	bf94      	ite	ls
 8001d10:	2301      	movls	r3, #1
 8001d12:	2300      	movhi	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e006      	b.n	8001d26 <HAL_I2C_Init+0x92>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a7d      	ldr	r2, [pc, #500]	; (8001f10 <HAL_I2C_Init+0x27c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0e7      	b.n	8001efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a78      	ldr	r2, [pc, #480]	; (8001f14 <HAL_I2C_Init+0x280>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9b      	lsrs	r3, r3, #18
 8001d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d802      	bhi.n	8001d68 <HAL_I2C_Init+0xd4>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	e009      	b.n	8001d7c <HAL_I2C_Init+0xe8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a69      	ldr	r2, [pc, #420]	; (8001f18 <HAL_I2C_Init+0x284>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	495c      	ldr	r1, [pc, #368]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d98:	428b      	cmp	r3, r1
 8001d9a:	d819      	bhi.n	8001dd0 <HAL_I2C_Init+0x13c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e59      	subs	r1, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001daa:	1c59      	adds	r1, r3, #1
 8001dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001db0:	400b      	ands	r3, r1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_I2C_Init+0x138>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e59      	subs	r1, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dca:	e051      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e04f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d111      	bne.n	8001dfc <HAL_I2C_Init+0x168>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1e58      	subs	r0, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e012      	b.n	8001e22 <HAL_I2C_Init+0x18e>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	0099      	lsls	r1, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Init+0x196>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e022      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10e      	bne.n	8001e50 <HAL_I2C_Init+0x1bc>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e58      	subs	r0, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6859      	ldr	r1, [r3, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	440b      	add	r3, r1
 8001e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	0099      	lsls	r1, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	6809      	ldr	r1, [r1, #0]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6911      	ldr	r1, [r2, #16]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68d2      	ldr	r2, [r2, #12]
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	000186a0 	.word	0x000186a0
 8001f0c:	001e847f 	.word	0x001e847f
 8001f10:	003d08ff 	.word	0x003d08ff
 8001f14:	431bde83 	.word	0x431bde83
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	b08f      	sub	sp, #60	; 0x3c
 8001f20:	af0a      	add	r7, sp, #40	; 0x28
 8001f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e10f      	b.n	800214e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d106      	bne.n	8001f4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fa0f 	bl	800136c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2203      	movs	r2, #3
 8001f52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 ff94 	bl	8003e9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	687e      	ldr	r6, [r7, #4]
 8001f7a:	466d      	mov	r5, sp
 8001f7c:	f106 0410 	add.w	r4, r6, #16
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f90:	1d33      	adds	r3, r6, #4
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f001 ff1f 	bl	8003dd8 <USB_CoreInit>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0d0      	b.n	800214e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 ff82 	bl	8003ebc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e04a      	b.n	8002054 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	333d      	adds	r3, #61	; 0x3d
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	333c      	adds	r3, #60	; 0x3c
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	b298      	uxth	r0, r3
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3342      	adds	r3, #66	; 0x42
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	333f      	adds	r3, #63	; 0x3f
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3344      	adds	r3, #68	; 0x44
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3348      	adds	r3, #72	; 0x48
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3350      	adds	r3, #80	; 0x50
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	3301      	adds	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d3af      	bcc.n	8001fbe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e044      	b.n	80020ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	3301      	adds	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3b5      	bcc.n	8002064 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	687e      	ldr	r6, [r7, #4]
 8002100:	466d      	mov	r5, sp
 8002102:	f106 0410 	add.w	r4, r6, #16
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002112:	e885 0003 	stmia.w	r5, {r0, r1}
 8002116:	1d33      	adds	r3, r6, #4
 8002118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211a:	6838      	ldr	r0, [r7, #0]
 800211c:	f001 ff1a 	bl	8003f54 <USB_DevInit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00d      	b.n	800214e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 f8c5 	bl	80042d6 <USB_DevDisconnect>

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e264      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d075      	beq.n	8002262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002176:	4ba3      	ldr	r3, [pc, #652]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d00c      	beq.n	800219c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002182:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218a:	2b08      	cmp	r3, #8
 800218c:	d112      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4b9d      	ldr	r3, [pc, #628]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219a:	d10b      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	4b99      	ldr	r3, [pc, #612]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d05b      	beq.n	8002260 <HAL_RCC_OscConfig+0x108>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d157      	bne.n	8002260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e23f      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d106      	bne.n	80021cc <HAL_RCC_OscConfig+0x74>
 80021be:	4b91      	ldr	r3, [pc, #580]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a90      	ldr	r2, [pc, #576]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xb0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x98>
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a8a      	ldr	r2, [pc, #552]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a87      	ldr	r2, [pc, #540]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xb0>
 80021f0:	4b84      	ldr	r3, [pc, #528]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a83      	ldr	r2, [pc, #524]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a80      	ldr	r2, [pc, #512]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff f9ce 	bl	80015b0 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff f9ca 	bl	80015b0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e204      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b76      	ldr	r3, [pc, #472]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xc0>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff f9ba 	bl	80015b0 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff f9b6 	bl	80015b0 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1f0      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0xe8>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226e:	4b65      	ldr	r3, [pc, #404]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227a:	4b62      	ldr	r3, [pc, #392]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b5c      	ldr	r3, [pc, #368]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x152>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1c4      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b56      	ldr	r3, [pc, #344]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4952      	ldr	r1, [pc, #328]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e03a      	b.n	8002336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <HAL_RCC_OscConfig+0x2b0>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff f96f 	bl	80015b0 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff f96b 	bl	80015b0 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1a5      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4940      	ldr	r1, [pc, #256]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <HAL_RCC_OscConfig+0x2b0>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7ff f94e 	bl	80015b0 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff f94a 	bl	80015b0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e184      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d030      	beq.n	80023a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x2b4>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7ff f92e 	bl	80015b0 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff f92a 	bl	80015b0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e164      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x200>
 8002376:	e015      	b.n	80023a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_OscConfig+0x2b4>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff f917 	bl	80015b0 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002386:	f7ff f913 	bl	80015b0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e14d      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 800239a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a0 	beq.w	80024f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_OscConfig+0x2b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d121      	bne.n	8002432 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_RCC_OscConfig+0x2b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_RCC_OscConfig+0x2b8>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fa:	f7ff f8d9 	bl	80015b0 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	e011      	b.n	8002426 <HAL_RCC_OscConfig+0x2ce>
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	42470000 	.word	0x42470000
 800240c:	42470e80 	.word	0x42470e80
 8002410:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7ff f8cc 	bl	80015b0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e106      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b85      	ldr	r3, [pc, #532]	; (800263c <HAL_RCC_OscConfig+0x4e4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x2f0>
 800243a:	4b81      	ldr	r3, [pc, #516]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a80      	ldr	r2, [pc, #512]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
 8002446:	e01c      	b.n	8002482 <HAL_RCC_OscConfig+0x32a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x312>
 8002450:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
 800245c:	4b78      	ldr	r3, [pc, #480]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a77      	ldr	r2, [pc, #476]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x32a>
 800246a:	4b75      	ldr	r3, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a74      	ldr	r2, [pc, #464]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	4b72      	ldr	r3, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a71      	ldr	r2, [pc, #452]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7ff f891 	bl	80015b0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff f88d 	bl	80015b0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0c5      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b65      	ldr	r3, [pc, #404]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x33a>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff f87b 	bl	80015b0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff f877 	bl	80015b0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0af      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b56      	ldr	r3, [pc, #344]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a55      	ldr	r2, [pc, #340]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 809b 	beq.w	8002632 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d05c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d141      	bne.n	8002594 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCC_OscConfig+0x4ec>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff f84b 	bl	80015b0 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff f847 	bl	80015b0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e081      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002530:	4b43      	ldr	r3, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	019b      	lsls	r3, r3, #6
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	4937      	ldr	r1, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002566:	4b37      	ldr	r3, [pc, #220]	; (8002644 <HAL_RCC_OscConfig+0x4ec>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7ff f820 	bl	80015b0 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002574:	f7ff f81c 	bl	80015b0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e056      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x41c>
 8002592:	e04e      	b.n	8002632 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002594:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_RCC_OscConfig+0x4ec>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff f809 	bl	80015b0 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7ff f805 	bl	80015b0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e03f      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x44a>
 80025c0:	e037      	b.n	8002632 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e032      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_RCC_OscConfig+0x4e8>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d028      	beq.n	800262e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d121      	bne.n	800262e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d11a      	bne.n	800262e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002604:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d107      	bne.n	800262e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40007000 	.word	0x40007000
 8002640:	40023800 	.word	0x40023800
 8002644:	42470060 	.word	0x42470060

08002648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0cc      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d90c      	bls.n	8002684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b65      	ldr	r3, [pc, #404]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b8      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b50      	ldr	r3, [pc, #320]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	494d      	ldr	r1, [pc, #308]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d044      	beq.n	8002768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d119      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	2b03      	cmp	r3, #3
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e067      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4934      	ldr	r1, [pc, #208]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002738:	f7fe ff3a 	bl	80015b0 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe ff36 	bl	80015b0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e04f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d20c      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e032      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4916      	ldr	r1, [pc, #88]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	490e      	ldr	r1, [pc, #56]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ce:	f000 f821 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	490a      	ldr	r1, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	5ccb      	ldrb	r3, [r1, r3]
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fe9a 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023c00 	.word	0x40023c00
 8002804:	40023800 	.word	0x40023800
 8002808:	0800441c 	.word	0x0800441c
 800280c:	20000000 	.word	0x20000000
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800281a:	2100      	movs	r1, #0
 800281c:	6079      	str	r1, [r7, #4]
 800281e:	2100      	movs	r1, #0
 8002820:	60f9      	str	r1, [r7, #12]
 8002822:	2100      	movs	r1, #0
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002826:	2100      	movs	r1, #0
 8002828:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282a:	4952      	ldr	r1, [pc, #328]	; (8002974 <HAL_RCC_GetSysClockFreq+0x160>)
 800282c:	6889      	ldr	r1, [r1, #8]
 800282e:	f001 010c 	and.w	r1, r1, #12
 8002832:	2908      	cmp	r1, #8
 8002834:	d00d      	beq.n	8002852 <HAL_RCC_GetSysClockFreq+0x3e>
 8002836:	2908      	cmp	r1, #8
 8002838:	f200 8094 	bhi.w	8002964 <HAL_RCC_GetSysClockFreq+0x150>
 800283c:	2900      	cmp	r1, #0
 800283e:	d002      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x32>
 8002840:	2904      	cmp	r1, #4
 8002842:	d003      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x38>
 8002844:	e08e      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002846:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_GetSysClockFreq+0x164>)
 8002848:	60bb      	str	r3, [r7, #8]
       break;
 800284a:	e08e      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284c:	4b4b      	ldr	r3, [pc, #300]	; (800297c <HAL_RCC_GetSysClockFreq+0x168>)
 800284e:	60bb      	str	r3, [r7, #8]
      break;
 8002850:	e08b      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002852:	4948      	ldr	r1, [pc, #288]	; (8002974 <HAL_RCC_GetSysClockFreq+0x160>)
 8002854:	6849      	ldr	r1, [r1, #4]
 8002856:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800285a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285c:	4945      	ldr	r1, [pc, #276]	; (8002974 <HAL_RCC_GetSysClockFreq+0x160>)
 800285e:	6849      	ldr	r1, [r1, #4]
 8002860:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002864:	2900      	cmp	r1, #0
 8002866:	d024      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002868:	4942      	ldr	r1, [pc, #264]	; (8002974 <HAL_RCC_GetSysClockFreq+0x160>)
 800286a:	6849      	ldr	r1, [r1, #4]
 800286c:	0989      	lsrs	r1, r1, #6
 800286e:	4608      	mov	r0, r1
 8002870:	f04f 0100 	mov.w	r1, #0
 8002874:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002878:	f04f 0500 	mov.w	r5, #0
 800287c:	ea00 0204 	and.w	r2, r0, r4
 8002880:	ea01 0305 	and.w	r3, r1, r5
 8002884:	493d      	ldr	r1, [pc, #244]	; (800297c <HAL_RCC_GetSysClockFreq+0x168>)
 8002886:	fb01 f003 	mul.w	r0, r1, r3
 800288a:	2100      	movs	r1, #0
 800288c:	fb01 f102 	mul.w	r1, r1, r2
 8002890:	1844      	adds	r4, r0, r1
 8002892:	493a      	ldr	r1, [pc, #232]	; (800297c <HAL_RCC_GetSysClockFreq+0x168>)
 8002894:	fba2 0101 	umull	r0, r1, r2, r1
 8002898:	1863      	adds	r3, r4, r1
 800289a:	4619      	mov	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	461a      	mov	r2, r3
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	f7fd fca0 	bl	80001e8 <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4613      	mov	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e04a      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_RCC_GetSysClockFreq+0x160>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	461a      	mov	r2, r3
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	ea02 0400 	and.w	r4, r2, r0
 80028ca:	ea03 0501 	and.w	r5, r3, r1
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	014b      	lsls	r3, r1, #5
 80028dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028e0:	0142      	lsls	r2, r0, #5
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	1b00      	subs	r0, r0, r4
 80028e8:	eb61 0105 	sbc.w	r1, r1, r5
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	018b      	lsls	r3, r1, #6
 80028f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028fa:	0182      	lsls	r2, r0, #6
 80028fc:	1a12      	subs	r2, r2, r0
 80028fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	00d9      	lsls	r1, r3, #3
 800290c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002910:	00d0      	lsls	r0, r2, #3
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	1912      	adds	r2, r2, r4
 8002918:	eb45 0303 	adc.w	r3, r5, r3
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0299      	lsls	r1, r3, #10
 8002926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800292a:	0290      	lsls	r0, r2, #10
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	461a      	mov	r2, r3
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	f7fd fc54 	bl	80001e8 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_GetSysClockFreq+0x160>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	60bb      	str	r3, [r7, #8]
      break;
 8002962:	e002      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <HAL_RCC_GetSysClockFreq+0x164>)
 8002966:	60bb      	str	r3, [r7, #8]
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	68bb      	ldr	r3, [r7, #8]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bdb0      	pop	{r4, r5, r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400
 800297c:	017d7840 	.word	0x017d7840

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	0800442c 	.word	0x0800442c

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffdc 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0b5b      	lsrs	r3, r3, #13
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	0800442c 	.word	0x0800442c

080029e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07b      	b.n	8002af2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a0a:	d009      	beq.n	8002a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
 8002a12:	e005      	b.n	8002a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fbca 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0104 	and.w	r1, r3, #4
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	f003 0210 	and.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b088      	sub	sp, #32
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_SPI_Transmit+0x22>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e126      	b.n	8002d6a <HAL_SPI_Transmit+0x270>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b24:	f7fe fd44 	bl	80015b0 <HAL_GetTick>
 8002b28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b3e:	e10b      	b.n	8002d58 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_SPI_Transmit+0x52>
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b50:	e102      	b.n	8002d58 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b98:	d10f      	bne.n	8002bba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d007      	beq.n	8002bd8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be0:	d14b      	bne.n	8002c7a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_SPI_Transmit+0xf6>
 8002bea:	8afb      	ldrh	r3, [r7, #22]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d13e      	bne.n	8002c6e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	1c9a      	adds	r2, r3, #2
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c14:	e02b      	b.n	8002c6e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d112      	bne.n	8002c4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	1c9a      	adds	r2, r3, #2
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c48:	e011      	b.n	8002c6e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c4a:	f7fe fcb1 	bl	80015b0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d803      	bhi.n	8002c62 <HAL_SPI_Transmit+0x168>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c60:	d102      	bne.n	8002c68 <HAL_SPI_Transmit+0x16e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c6c:	e074      	b.n	8002d58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ce      	bne.n	8002c16 <HAL_SPI_Transmit+0x11c>
 8002c78:	e04c      	b.n	8002d14 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_SPI_Transmit+0x18e>
 8002c82:	8afb      	ldrh	r3, [r7, #22]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d140      	bne.n	8002d0a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	7812      	ldrb	r2, [r2, #0]
 8002c94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cae:	e02c      	b.n	8002d0a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d113      	bne.n	8002ce6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ce4:	e011      	b.n	8002d0a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ce6:	f7fe fc63 	bl	80015b0 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d803      	bhi.n	8002cfe <HAL_SPI_Transmit+0x204>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfc:	d102      	bne.n	8002d04 <HAL_SPI_Transmit+0x20a>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d08:	e026      	b.n	8002d58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1cd      	bne.n	8002cb0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f8b3 	bl	8002e84 <SPI_EndRxTxTransaction>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e000      	b.n	8002d58 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d84:	f7fe fc14 	bl	80015b0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d94:	f7fe fc0c 	bl	80015b0 <HAL_GetTick>
 8002d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	015b      	lsls	r3, r3, #5
 8002da0:	0d1b      	lsrs	r3, r3, #20
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002daa:	e054      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db2:	d050      	beq.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db4:	f7fe fbfc 	bl	80015b0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d902      	bls.n	8002dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d13d      	bne.n	8002e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de2:	d111      	bne.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dec:	d004      	beq.n	8002df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	d107      	bne.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e10:	d10f      	bne.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e017      	b.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d19b      	bne.n	8002dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000

08002e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <SPI_EndRxTxTransaction+0x7c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <SPI_EndRxTxTransaction+0x80>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0d5b      	lsrs	r3, r3, #21
 8002e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eae:	d112      	bne.n	8002ed6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ff5a 	bl	8002d74 <SPI_WaitFlagStateUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e00f      	b.n	8002ef6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d0f2      	beq.n	8002ed6 <SPI_EndRxTxTransaction+0x52>
 8002ef0:	e000      	b.n	8002ef4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ef2:	bf00      	nop
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000000 	.word	0x20000000
 8002f04:	165e9f81 	.word	0x165e9f81

08002f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e03f      	b.n	8002f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe f998 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fd7b 	bl	8003a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b08a      	sub	sp, #40	; 0x28
 8002fa6:	af02      	add	r7, sp, #8
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d17c      	bne.n	80030bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_UART_Transmit+0x2c>
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e075      	b.n	80030be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Transmit+0x3e>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e06e      	b.n	80030be <HAL_UART_Transmit+0x11c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2221      	movs	r2, #33	; 0x21
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff6:	f7fe fadb 	bl	80015b0 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003010:	d108      	bne.n	8003024 <HAL_UART_Transmit+0x82>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	e003      	b.n	800302c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003034:	e02a      	b.n	800308c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 faf9 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e036      	b.n	80030be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	3302      	adds	r3, #2
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	e007      	b.n	800307e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1cf      	bne.n	8003036 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fac9 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e006      	b.n	80030be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0ba      	sub	sp, #232	; 0xe8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_UART_IRQHandler+0x66>
 800311a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fbd3 	bl	80038d2 <UART_Receive_IT>
      return;
 800312c:	e256      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800312e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80de 	beq.w	80032f4 <HAL_UART_IRQHandler+0x22c>
 8003138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80d1 	beq.w	80032f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_UART_IRQHandler+0xae>
 800315e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_UART_IRQHandler+0xd2>
 8003182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0202 	orr.w	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_UART_IRQHandler+0xf6>
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <HAL_UART_IRQHandler+0x126>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 81ed 	beq.w	80035d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_UART_IRQHandler+0x14e>
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb5e 	bl	80038d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_UART_IRQHandler+0x17a>
 800323a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04f      	beq.n	80032e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa66 	bl	8003714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d141      	bne.n	80032da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800326c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800328e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800329a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1d9      	bne.n	8003256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d013      	beq.n	80032d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	4a7d      	ldr	r2, [pc, #500]	; (80034a4 <HAL_UART_IRQHandler+0x3dc>)
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fb2b 	bl	8001912 <HAL_DMA_Abort_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032cc:	4610      	mov	r0, r2
 80032ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00e      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f99a 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e00a      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f996 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e006      	b.n	80032f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f992 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032ee:	e170      	b.n	80035d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	bf00      	nop
    return;
 80032f2:	e16e      	b.n	80035d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 814a 	bne.w	8003592 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8143 	beq.w	8003592 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 813c 	beq.w	8003592 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	f040 80b4 	bne.w	80034a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800334c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8140 	beq.w	80035d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800335a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335e:	429a      	cmp	r2, r3
 8003360:	f080 8139 	bcs.w	80035d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	f000 8088 	beq.w	800348a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1d9      	bne.n	800337a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e1      	bne.n	80033c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800342c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e3      	bne.n	8003402 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	f023 0310 	bic.w	r3, r3, #16
 800345e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800346c:	65ba      	str	r2, [r7, #88]	; 0x58
 800346e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800347a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e3      	bne.n	8003448 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe f9d4 	bl	8001832 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003492:	b29b      	uxth	r3, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8c0 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034a0:	e099      	b.n	80035d6 <HAL_UART_IRQHandler+0x50e>
 80034a2:	bf00      	nop
 80034a4:	080037db 	.word	0x080037db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 808b 	beq.w	80035da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8086 	beq.w	80035da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034f2:	647a      	str	r2, [r7, #68]	; 0x44
 80034f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e3      	bne.n	80034ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	623b      	str	r3, [r7, #32]
   return(result);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3314      	adds	r3, #20
 8003526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800352a:	633a      	str	r2, [r7, #48]	; 0x30
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e3      	bne.n	8003506 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	60fb      	str	r3, [r7, #12]
   return(result);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0310 	bic.w	r3, r3, #16
 8003562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003570:	61fa      	str	r2, [r7, #28]
 8003572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	617b      	str	r3, [r7, #20]
   return(result);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e3      	bne.n	800354c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f848 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003590:	e023      	b.n	80035da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_UART_IRQHandler+0x4ea>
 800359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f929 	bl	8003802 <UART_Transmit_IT>
    return;
 80035b0:	e014      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <HAL_UART_IRQHandler+0x514>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f969 	bl	80038a2 <UART_EndTransmit_IT>
    return;
 80035d0:	e004      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
    return;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
      return;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <HAL_UART_IRQHandler+0x514>
      return;
 80035da:	bf00      	nop
  }
}
 80035dc:	37e8      	adds	r7, #232	; 0xe8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop

080035e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b090      	sub	sp, #64	; 0x40
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003648:	e050      	b.n	80036ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003650:	d04c      	beq.n	80036ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <UART_WaitOnFlagUntilTimeout+0x30>
 8003658:	f7fd ffaa 	bl	80015b0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003664:	429a      	cmp	r2, r3
 8003666:	d241      	bcs.n	80036ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003688:	637a      	str	r2, [r7, #52]	; 0x34
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800368e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3314      	adds	r3, #20
 80036a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	613b      	str	r3, [r7, #16]
   return(result);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3314      	adds	r3, #20
 80036ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036bc:	623a      	str	r2, [r7, #32]
 80036be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	69f9      	ldr	r1, [r7, #28]
 80036c2:	6a3a      	ldr	r2, [r7, #32]
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e5      	bne.n	800369c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e00f      	b.n	800370c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	429a      	cmp	r2, r3
 8003708:	d09f      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3740      	adds	r7, #64	; 0x40
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b095      	sub	sp, #84	; 0x54
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800373c:	643a      	str	r2, [r7, #64]	; 0x40
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e5      	bne.n	800371c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3314      	adds	r3, #20
 8003756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3314      	adds	r3, #20
 800376e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	2b01      	cmp	r3, #1
 800378a:	d119      	bne.n	80037c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	60bb      	str	r3, [r7, #8]
   return(result);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f023 0310 	bic.w	r3, r3, #16
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ac:	61ba      	str	r2, [r7, #24]
 80037ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6979      	ldr	r1, [r7, #20]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e5      	bne.n	800378c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037ce:	bf00      	nop
 80037d0:	3754      	adds	r7, #84	; 0x54
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff ff09 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b21      	cmp	r3, #33	; 0x21
 8003814:	d13e      	bne.n	8003894 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381e:	d114      	bne.n	800384a <UART_Transmit_IT+0x48>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d110      	bne.n	800384a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]
 8003848:	e008      	b.n	800385c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6211      	str	r1, [r2, #32]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29b      	uxth	r3, r3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4619      	mov	r1, r3
 800386a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10f      	bne.n	8003890 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800387e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fe8e 	bl	80035e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b08c      	sub	sp, #48	; 0x30
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b22      	cmp	r3, #34	; 0x22
 80038e4:	f040 80ab 	bne.w	8003a3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f0:	d117      	bne.n	8003922 <UART_Receive_IT+0x50>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d113      	bne.n	8003922 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003910:	b29a      	uxth	r2, r3
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	1c9a      	adds	r2, r3, #2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
 8003920:	e026      	b.n	8003970 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d007      	beq.n	8003946 <UART_Receive_IT+0x74>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <UART_Receive_IT+0x82>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e008      	b.n	8003966 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003960:	b2da      	uxtb	r2, r3
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29b      	uxth	r3, r3
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4619      	mov	r1, r3
 800397e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003980:	2b00      	cmp	r3, #0
 8003982:	d15a      	bne.n	8003a3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0220 	bic.w	r2, r2, #32
 8003992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d135      	bne.n	8003a30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	613b      	str	r3, [r7, #16]
   return(result);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f023 0310 	bic.w	r3, r3, #16
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	623a      	str	r2, [r7, #32]
 80039ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	69f9      	ldr	r1, [r7, #28]
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e5      	bne.n	80039ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d10a      	bne.n	8003a22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fdf9 	bl	8003620 <HAL_UARTEx_RxEventCallback>
 8003a2e:	e002      	b.n	8003a36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fde1 	bl	80035f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e002      	b.n	8003a40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3730      	adds	r7, #48	; 0x30
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	b09f      	sub	sp, #124	; 0x7c
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5e:	68d9      	ldr	r1, [r3, #12]
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	ea40 0301 	orr.w	r3, r0, r1
 8003a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a8c:	f021 010c 	bic.w	r1, r1, #12
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a96:	430b      	orrs	r3, r1
 8003a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	6999      	ldr	r1, [r3, #24]
 8003aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	ea40 0301 	orr.w	r3, r0, r1
 8003ab0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4bc5      	ldr	r3, [pc, #788]	; (8003dcc <UART_SetConfig+0x384>)
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d004      	beq.n	8003ac6 <UART_SetConfig+0x7e>
 8003abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4bc3      	ldr	r3, [pc, #780]	; (8003dd0 <UART_SetConfig+0x388>)
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d103      	bne.n	8003ace <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac6:	f7fe ff7b 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8003aca:	6778      	str	r0, [r7, #116]	; 0x74
 8003acc:	e002      	b.n	8003ad4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe ff63 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003adc:	f040 80b6 	bne.w	8003c4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	f04f 0500 	mov.w	r5, #0
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	6439      	str	r1, [r7, #64]	; 0x40
 8003af0:	415b      	adcs	r3, r3
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
 8003af4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003af8:	1912      	adds	r2, r2, r4
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	00d9      	lsls	r1, r3, #3
 8003b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b0c:	00d0      	lsls	r0, r2, #3
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	1911      	adds	r1, r2, r4
 8003b14:	6639      	str	r1, [r7, #96]	; 0x60
 8003b16:	416b      	adcs	r3, r5
 8003b18:	667b      	str	r3, [r7, #100]	; 0x64
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b34:	f7fc fb58 	bl	80001e8 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4ba5      	ldr	r3, [pc, #660]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	011e      	lsls	r6, r3, #4
 8003b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b48:	461c      	mov	r4, r3
 8003b4a:	f04f 0500 	mov.w	r5, #0
 8003b4e:	4622      	mov	r2, r4
 8003b50:	462b      	mov	r3, r5
 8003b52:	1891      	adds	r1, r2, r2
 8003b54:	6339      	str	r1, [r7, #48]	; 0x30
 8003b56:	415b      	adcs	r3, r3
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b5e:	1912      	adds	r2, r2, r4
 8003b60:	eb45 0303 	adc.w	r3, r5, r3
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	00d9      	lsls	r1, r3, #3
 8003b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b72:	00d0      	lsls	r0, r2, #3
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	1911      	adds	r1, r2, r4
 8003b7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b7c:	416b      	adcs	r3, r5
 8003b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	461a      	mov	r2, r3
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	1891      	adds	r1, r2, r2
 8003b8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b8e:	415b      	adcs	r3, r3
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b9a:	f7fc fb25 	bl	80001e8 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4b8c      	ldr	r3, [pc, #560]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a87      	ldr	r2, [pc, #540]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bc4:	441e      	add	r6, r3
 8003bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	1894      	adds	r4, r2, r2
 8003bd4:	623c      	str	r4, [r7, #32]
 8003bd6:	415b      	adcs	r3, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bde:	1812      	adds	r2, r2, r0
 8003be0:	eb41 0303 	adc.w	r3, r1, r3
 8003be4:	f04f 0400 	mov.w	r4, #0
 8003be8:	f04f 0500 	mov.w	r5, #0
 8003bec:	00dd      	lsls	r5, r3, #3
 8003bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bf2:	00d4      	lsls	r4, r2, #3
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	1814      	adds	r4, r2, r0
 8003bfa:	653c      	str	r4, [r7, #80]	; 0x50
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	61b9      	str	r1, [r7, #24]
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c1a:	f7fc fae5 	bl	80001e8 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003c24:	fba3 1302 	umull	r1, r3, r3, r2
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	2164      	movs	r1, #100	; 0x64
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	3332      	adds	r3, #50	; 0x32
 8003c36:	4a67      	ldr	r2, [pc, #412]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	f003 0207 	and.w	r2, r3, #7
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4432      	add	r2, r6
 8003c48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c4a:	e0b9      	b.n	8003dc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4e:	461c      	mov	r4, r3
 8003c50:	f04f 0500 	mov.w	r5, #0
 8003c54:	4622      	mov	r2, r4
 8003c56:	462b      	mov	r3, r5
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c64:	1912      	adds	r2, r2, r4
 8003c66:	eb45 0303 	adc.w	r3, r5, r3
 8003c6a:	f04f 0000 	mov.w	r0, #0
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	00d9      	lsls	r1, r3, #3
 8003c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c78:	00d0      	lsls	r0, r2, #3
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	eb12 0804 	adds.w	r8, r2, r4
 8003c82:	eb43 0905 	adc.w	r9, r3, r5
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	008b      	lsls	r3, r1, #2
 8003c9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c9e:	0082      	lsls	r2, r0, #2
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	f7fc faa0 	bl	80001e8 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003cae:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	011e      	lsls	r6, r3, #4
 8003cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	1894      	adds	r4, r2, r2
 8003cc4:	60bc      	str	r4, [r7, #8]
 8003cc6:	415b      	adcs	r3, r3
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cce:	1812      	adds	r2, r2, r0
 8003cd0:	eb41 0303 	adc.w	r3, r1, r3
 8003cd4:	f04f 0400 	mov.w	r4, #0
 8003cd8:	f04f 0500 	mov.w	r5, #0
 8003cdc:	00dd      	lsls	r5, r3, #3
 8003cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ce2:	00d4      	lsls	r4, r2, #3
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	1814      	adds	r4, r2, r0
 8003cea:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cec:	414b      	adcs	r3, r1
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	008b      	lsls	r3, r1, #2
 8003d04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d08:	0082      	lsls	r2, r0, #2
 8003d0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d0e:	f7fc fa6b 	bl	80001e8 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003d18:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	3332      	adds	r3, #50	; 0x32
 8003d2a:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d36:	441e      	add	r6, r3
 8003d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	1894      	adds	r4, r2, r2
 8003d46:	603c      	str	r4, [r7, #0]
 8003d48:	415b      	adcs	r3, r3
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d50:	1812      	adds	r2, r2, r0
 8003d52:	eb41 0303 	adc.w	r3, r1, r3
 8003d56:	f04f 0400 	mov.w	r4, #0
 8003d5a:	f04f 0500 	mov.w	r5, #0
 8003d5e:	00dd      	lsls	r5, r3, #3
 8003d60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d64:	00d4      	lsls	r4, r2, #3
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	eb12 0a00 	adds.w	sl, r2, r0
 8003d6e:	eb43 0b01 	adc.w	fp, r3, r1
 8003d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	008b      	lsls	r3, r1, #2
 8003d86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d8a:	0082      	lsls	r2, r0, #2
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	4659      	mov	r1, fp
 8003d90:	f7fc fa2a 	bl	80001e8 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2164      	movs	r1, #100	; 0x64
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	; 0x32
 8003dac:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4432      	add	r2, r6
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	377c      	adds	r7, #124	; 0x7c
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40011000 	.word	0x40011000
 8003dd0:	40011400 	.word	0x40011400
 8003dd4:	51eb851f 	.word	0x51eb851f

08003dd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dd8:	b084      	sub	sp, #16
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	f107 001c 	add.w	r0, r7, #28
 8003de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d122      	bne.n	8003e36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa82 	bl	8004334 <USB_CoreReset>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e01a      	b.n	8003e6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa76 	bl	8004334 <USB_CoreReset>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e5e:	e005      	b.n	8003e6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10b      	bne.n	8003e8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f043 0206 	orr.w	r2, r3, #6
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e96:	b004      	add	sp, #16
 8003e98:	4770      	bx	lr

08003e9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d115      	bne.n	8003f0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7fd fb6c 	bl	80015c8 <HAL_Delay>
      ms++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fa0e 	bl	8004318 <USB_GetMode>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d01e      	beq.n	8003f40 <USB_SetCurrentMode+0x84>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b31      	cmp	r3, #49	; 0x31
 8003f06:	d9f0      	bls.n	8003eea <USB_SetCurrentMode+0x2e>
 8003f08:	e01a      	b.n	8003f40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d115      	bne.n	8003f3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7fd fb53 	bl	80015c8 <HAL_Delay>
      ms++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3301      	adds	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f9f5 	bl	8004318 <USB_GetMode>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <USB_SetCurrentMode+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b31      	cmp	r3, #49	; 0x31
 8003f38:	d9f0      	bls.n	8003f1c <USB_SetCurrentMode+0x60>
 8003f3a:	e001      	b.n	8003f40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e005      	b.n	8003f4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b32      	cmp	r3, #50	; 0x32
 8003f44:	d101      	bne.n	8003f4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f54:	b084      	sub	sp, #16
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	e009      	b.n	8003f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3340      	adds	r3, #64	; 0x40
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3301      	adds	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b0e      	cmp	r3, #14
 8003f8c:	d9f2      	bls.n	8003f74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11c      	bne.n	8003fce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
 8003fcc:	e00b      	b.n	8003fe6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	461a      	mov	r2, r3
 8004002:	680b      	ldr	r3, [r1, #0]
 8004004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10c      	bne.n	8004026 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004012:	2100      	movs	r1, #0
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f945 	bl	80042a4 <USB_SetDevSpeed>
 800401a:	e008      	b.n	800402e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800401c:	2101      	movs	r1, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f940 	bl	80042a4 <USB_SetDevSpeed>
 8004024:	e003      	b.n	800402e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004026:	2103      	movs	r1, #3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f93b 	bl	80042a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800402e:	2110      	movs	r1, #16
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8f3 	bl	800421c <USB_FlushTxFifo>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f90f 	bl	8004264 <USB_FlushRxFifo>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	461a      	mov	r2, r3
 8004058:	2300      	movs	r3, #0
 800405a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	461a      	mov	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	461a      	mov	r2, r3
 8004070:	2300      	movs	r3, #0
 8004072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e043      	b.n	8004102 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800408c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004090:	d118      	bne.n	80040c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e013      	b.n	80040d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e008      	b.n	80040d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	461a      	mov	r2, r3
 80040f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3301      	adds	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d3b7      	bcc.n	800407a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e043      	b.n	8004198 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004126:	d118      	bne.n	800415a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e013      	b.n	800416c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e008      	b.n	800416c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3b7      	bcc.n	8004110 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f043 0210 	orr.w	r2, r3, #16
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <USB_DevInit+0x2c4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004214:	b004      	add	sp, #16
 8004216:	4770      	bx	lr
 8004218:	803c3800 	.word	0x803c3800

0800421c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	019b      	lsls	r3, r3, #6
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	4a08      	ldr	r2, [pc, #32]	; (8004260 <USB_FlushTxFifo+0x44>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e006      	b.n	8004254 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b20      	cmp	r3, #32
 8004250:	d0f1      	beq.n	8004236 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	00030d40 	.word	0x00030d40

08004264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2210      	movs	r2, #16
 8004274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <USB_FlushRxFifo+0x3c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e006      	b.n	8004294 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b10      	cmp	r3, #16
 8004290:	d0f1      	beq.n	8004276 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	00030d40 	.word	0x00030d40

080042a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	68f9      	ldr	r1, [r7, #12]
 80042c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042f0:	f023 0303 	bic.w	r3, r3, #3
 80042f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0301 	and.w	r3, r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <USB_CoreReset+0x60>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e01a      	b.n	8004386 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	daf3      	bge.n	8004340 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <USB_CoreReset+0x60>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d901      	bls.n	8004378 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e006      	b.n	8004386 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d0f1      	beq.n	8004368 <USB_CoreReset+0x34>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	00030d40 	.word	0x00030d40

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4d0d      	ldr	r5, [pc, #52]	; (80043d0 <__libc_init_array+0x38>)
 800439c:	4c0d      	ldr	r4, [pc, #52]	; (80043d4 <__libc_init_array+0x3c>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	2600      	movs	r6, #0
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	4d0b      	ldr	r5, [pc, #44]	; (80043d8 <__libc_init_array+0x40>)
 80043aa:	4c0c      	ldr	r4, [pc, #48]	; (80043dc <__libc_init_array+0x44>)
 80043ac:	f000 f820 	bl	80043f0 <_init>
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	2600      	movs	r6, #0
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	0800443c 	.word	0x0800443c
 80043d4:	0800443c 	.word	0x0800443c
 80043d8:	0800443c 	.word	0x0800443c
 80043dc:	08004440 	.word	0x08004440

080043e0 <memset>:
 80043e0:	4402      	add	r2, r0
 80043e2:	4603      	mov	r3, r0
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d100      	bne.n	80043ea <memset+0xa>
 80043e8:	4770      	bx	lr
 80043ea:	f803 1b01 	strb.w	r1, [r3], #1
 80043ee:	e7f9      	b.n	80043e4 <memset+0x4>

080043f0 <_init>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr

080043fc <_fini>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr
